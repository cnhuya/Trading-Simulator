<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Market" xml:space="preserve">
    <value>시장 선택</value>
  </data>
  <data name="grid_info" xml:space="preserve">
    <value>단순하지만 유용하고 고도로 맞춤화된 그리드 거래 시뮬레이션. A.K.A. 이전 가격보다 낮게 구매하고 이전 트리거보다 높게 판매.</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>금액</value>
  </data>
  <data name="Balance Combined" xml:space="preserve">
    <value>합산 잔액</value>
  </data>
  <data name="bought" xml:space="preserve">
    <value>구입됨</value>
  </data>
  <data name="sold" xml:space="preserve">
    <value>판매됨</value>
  </data>
  <data name="Profit" xml:space="preserve">
    <value>이익</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>계속</value>
  </data>
  <data name="Last Trigger" xml:space="preserve">
    <value>마지막 트리거</value>
  </data>
  <data name="dca_info" xml:space="preserve">
    <value>당신의 DCA 전략이 어떻게 됐을지 궁금하신가요? 그렇다면 알아보겠습니다. 우리는 매우 맞춤화된 DCA 시뮬레이터를 만들었습니다</value>
  </data>
  <data name="average_buy" xml:space="preserve">
    <value>평균 구매</value>
  </data>
  <data name="token_balance" xml:space="preserve">
    <value>토큰 잔액</value>
  </data>
  <data name="Balance" xml:space="preserve">
    <value>잔액</value>
  </data>
  <data name="Interval" xml:space="preserve">
    <value>간격</value>
  </data>
  <data name="initial_balance" xml:space="preserve">
    <value> 초기 잔액</value>
  </data>
  <data name="Ticker" xml:space="preserve">
    <value> 티커를 입력하세요</value>
  </data>
  <data name="average_sell" xml:space="preserve">
    <value>평균 판매</value>
  </data>
  <data name="Exchange" xml:space="preserve">
    <value>귀하의 교환을 입력하세요</value>
  </data>
  <data name="Buy" xml:space="preserve">
    <value>매수</value>
  </data>
  <data name="Sell" xml:space="preserve">
    <value> 매도</value>
  </data>
  <data name="sellTrigger" xml:space="preserve">
    <value>매도 트리거</value>
  </data>
  <data name="buyTrigger" xml:space="preserve">
    <value>매수 트리거</value>
  </data>
</root>